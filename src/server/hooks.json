[{"name":"useAbortableFetch","description":"This hook does a fetch and aborts when the component is unloaded or a new fetch is started.","_tags":"js"},{"name":"useActive","description":"This hook lets you know when your mouse pointer is active on a particular element. It needs a ref of the element in question to work with. It can also take an onChange callback which it calls everytime the active state changes. The onChange function recieves the current active state of the element as a boolean value.","_tags":"js"},{"name":"useArray","description":"This hook has methods that allow you to modify an array. Methods include add, clear, removeIndex and RemoveByIndex.","_tags":"js"},{"name":"useAsync","description":"This hook resolves an async function or a function that returns a promise.","_tags":"js"},{"name":"useBattery","description":"This is a React sensor hook that tracks battery status.","_tags":"js"},{"name":"useBoolean","description":"This hook has methods that allow you to modify a boolean. Methods include Toggle, setTrue, and setFalse.","_tags":"js"},{"name":"useComponentSize","description":"This hook determines the size of a component.","_tags":"js"},{"name":"useContextReducer","description":"This hook lets you use a useReducer-like hook for global state.","_tags":"js"},{"name":"useCreateStructuredSelector","description":"This hook returns an object with the same keys as the inputSelectors argument, but with the selectors replaced with their values.","_tags":"js"},{"name":"useCreateSelector","description":"This hook creates a selector for your component","_tags":"js"},{"name":"useCreateStateSelector","description":"This hook creates a state selector for your component","_tags":"js"},{"name":"useDataLoader","description":"This hook is used for data loading.","_tags":"js"},{"name":"useDebounce","description":"This hook is for debouncing.","_tags":"js"},{"name":"useDeviceMotion","description":"This hook detects and retrieves current device Motion.","_tags":"js"},{"name":"useDeviceOrientation","description":"This hook detects and retrieves current device orientation.","_tags":"js"},{"name":"useDocumentTitle","description":"This hook sets the title of a page.","_tags":"js"},{"name":"useDocumentVisibility","description":"This hook is used for subscribing to document visibility.","_tags":"js"},{"name":"useDomLocation","description":"This hook is used for subscribing to the window size.","_tags":"js"},{"name":"useFavicon","description":"This hook sets the favicon of the page.","_tags":"js"},{"name":"useGeolocation","description":"This hook tracks a user's geographic location.","_tags":"js"},{"name":"useHover","description":"This hook tracks if an element is being hovered by a mouse.","_tags":"js"},{"name":"useInput","description":"This hook allows you to modify the value of an input. Methods include clear, onChangeHandler, bindToInput, and bind.","_tags":"js"},{"name":"useInput","description":"This hook allows you to modify the value of an input. Methods include clear, onChangeHandler, bindToInput, and bind.","_tags":"js"},{"name":"useIntersectionObserver","description":"This hook is used for triggering transitions","_tags":"js"},{"name":"useIntersectionVisibleHook","description":"This hook tracks the visibility of a functional component based on Intersection Visible Observer.","_tags":"js"},{"name":"useInterval","description":"This hook starts an interval timer that can be stopped/resumed any time. It takes in startImmediate which decides whether the interval is on by default. It also takes a time which is the interval duration.\n\nIt provides a start and stop method which allow us to control the state of the interval.","_tags":"js"},{"name":"useLifecycles","description":"This hook calls mount and unmount callbacks, when component is mounted and un-mounted, respectively.","_tags":"js"},{"name":"useLocalStorage","description":"This hook is used for local-storage","_tags":"js"},{"name":"useLocation","description":"This hook tracks the browser's location.","_tags":"js"},{"name":"useLogger","description":"This hook logs in the console as component transitions through life-cycles.","_tags":"js"},{"name":"useMap","description":"This hook allows you to use a map object and get methods to manipulate the map.","_tags":"js"},{"name":"useMedia","description":"This hook tracks the state of a CSS media query.","_tags":"js"},{"name":"useMemento","description":"This hook maintains a similar api to react's state hook. In addition to the current value, and a setter, it provides a memento component to display the debugger UI. The function also accepts an optional label to identify multiple mementos rendered to the page.","_tags":"js"},{"name":"useMount","description":"This hook calls a mount callback, when the component is mounted.","_tags":"js"},{"name":"useNetworkStatus","description":"This hook retrieves the network status from the browser.","_tags":"js"},{"name":"useNumber","description":"This hook uses methods to increase and decrease the declared number. Methods include increase and decrease.","_tags":"js"},{"name":"useOnlineStatus","description":"This hook is used for subscribing to online/offline events.","_tags":"js"},{"name":"useOnMount","description":"This hook is used for the onMount lifecycle.","_tags":"js"},{"name":"useOnUnmount","description":"This hook is used for the unMount lifecycle.","_tags":"js"},{"name":"usePrevious","description":"This hook is used to get the previous value of a prop or a state value.","_tags":"js"},{"name":"usePromiseHook","description":"This hook is used for handling promises.","_tags":"js"},{"name":"useRaf","description":"This hook forces components to re-render on each requested Animation Frame, and returns the percentage of time elapsed.","_tags":"js"},{"name":"useSetstate","description":"This hook creates a setState method which works similar to how this.setState works in class componentsâ€”it merges object changes into current state.","_tags":"js"},{"name":"useSpeech","description":"This hook synthesizes a human voice that speaks a given string.","_tags":"js"},{"name":"useTimeout","description":"This hook returns true after a specified number of milliseconds.","_tags":"js"},{"name":"useTimer","description":"This hook handles timers and countdown logic in your component.","_tags":"js"},{"name":"useTitle","description":"This hook sets the title of a page.","_tags":"js"},{"name":"useToggle","description":"This hook allows you to toggle between values.","_tags":"js"},{"name":"useUnmount","description":"This hook calls a unmount callback, when the component is un-mounted.","_tags":"js"},{"name":"useUpdate","description":"This hook returns true after a specified number of milliseconds.","_tags":"js"},{"name":"useWait","description":"This hook helps to manage multiple loading states on the page without any conflict.","_tags":"js"},{"name":"useWindowCommunication","description":"This hook is used for communicating among browsers contexts (windows, tabs, iframes).","_tags":"js"},{"name":"useWindowMousePosition","description":"This hook gets the mouse position on the window.","_tags":"js"},{"name":"useWindowScrollPosition","description":"This hook gets the horizontal and vertical position of the window scroll.","_tags":"js"},{"name":"useWindowSize","description":"This hook gets the width and height of the browser viewport","_tags":"js"}]